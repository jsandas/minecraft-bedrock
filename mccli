#!/bin/bash

function check_versions() {
    regex='bedrock-server-([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).zip'
    _mc_url=$(curl -s https://net-secondary.web.minecraft-services.net/api/v1.0/download/links \
        | jq '.[].links.[] | select(.downloadType=="serverBedrockLinux") | .downloadUrl')
    if [[ $_mc_url =~ $regex ]]; then
        _mc_ver="${BASH_REMATCH[1]}"
    fi

    _image_ver=$(docker run --entrypoint /usr/bin/env ghcr.io/jsandas/minecraft-bedrock:latest | grep MINECRAFT_VER | cut -d "=" -f2)
    _chart_ver=$(cat helm/minecraft-bedrock/Chart.yaml | grep appVersion | awk '{print $2}' | tr -d '"')

    if [[ -z $_mc_ver || -z $_image_ver || -z $_chart_ver ]]; then
        echo " Failed to retrieve all versions"
        echo " mc_ver=$_mc_ver image_ver=$_image_ver chart_ver=$_chart_ver"
        exit 1
    fi

    if [[ "$_mc_ver" != "$_image_ver" || "$_mc_ver" != "$_chart_ver" ]]; then 
        echo " New version found: $_mc_ver"
        sed -i 's/MC_VER=.*/MC_VER='"$_mc_ver"'/g' Dockerfile
        sed -i 's/^appVersion:.*/appVersion: \"'"$_mc_ver"'\"/g' helm/minecraft-bedrock/Chart.yaml
    fi    
}

function check_server() {
    _mc_ver=$(cat Dockerfile | grep MC_VER= | awk -F "=" '{print $2}')

    _max_rety=5
    _attempts=1
    while true
    do
        echo -n " check attempt $_attempts..."
        docker compose exec -it server bash -c "mc-monitor status-bedrock --host 127.0.0.1" >/dev/null 2>&1
        if (( $? == 0 )); then
            echo "success"
            break
        fi
        echo "failed"
        _attempts=$((_attempts+1))
        if (( $_attempts > $_max_rety )); then
            echo "max retries reached, exiting..."
            exit 1
        fi
        sleep 5
    done

    sleep 2
    _check_results=$(docker compose exec -it server bash -c "mc-monitor status-bedrock --host 127.0.0.1")
    _check_version=$(echo $_check_results | cut -d " " -f3 | cut -d "=" -f2)

    if [[ "$_mc_ver" != "$_check_version"* ]]; then
        echo "check failed"
        exit 1
    else
        echo "Found version: $_check_version"
    fi
}

if [[ "$@" != "" ]]; then
    $@
else
    while true
    do
        cat output_pipe
        echo -n > output_pipe
        read line
        echo $line > input_pipe
        sleep 1
        cat output_pipe
    done
fi
